    # This is the name your Order Service will use to register with Eureka.
    # It's fetched from the Config Server.
    spring.application.name=orders

    server.port=9090

    # --- Database Configuration ---
    # Option 1: PostgreSQL running on HOST, accessible via host.docker.internal (for Docker Desktop Mac/Win)
	spring.datasource.url=jdbc:postgresql://host.docker.internal:5432/Orders
    spring.datasource.username=postgres
    spring.datasource.password=admin
    spring.datasource.driver-class-name=org.postgresql.Driver

    # --- JPA / Hibernate Configuration ---
    spring.jpa.hibernate.ddl-auto=update
    spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
    spring.jpa.properties.hibernate.format_sql=true
    spring.jpa.show-sql=true
    # spring.jpa.generate-ddl=true # ddl-auto usually sufficient

    # --- Logging Configuration ---
    logging.level.org.hibernate.SQL=DEBUG
    logging.level.org.hibernate.tool.hbm2ddl=DEBUG
    logging.level.com.example.orders=INFO

    # --- Eureka Client Configuration (for Order Service's own registration) ---
    eureka.client.service-url.defaultZone=http://my-eureka-container:8761/eureka/
    eureka.instance.prefer-ip-address=true

    # --- Management Endpoints ---
    management.endpoints.web.exposure.include=health,info,refresh,metrics,env

    # --- gRPC Client Configuration (for calling Inventory Service) ---
    # Assuming Inventory Service registers with Eureka as "INVENTORY"
    # and its gRPC port is advertised in Eureka metadata.
    grpc.client.inventory-service.address=discovery:///INVENTORY
    grpc.client.inventory-service.negotiationType=plaintext
	grpc.server.port=9555

    # --- gRPC Server Configuration (if Order Service also hosts a gRPC server) ---
    # grpc.server.port=9555 # Example if Order Service had its own gRPC server

    # --- Thymeleaf (if used) ---
    # spring.thymeleaf.check-template-location=false
	
	# In orders-dev.properties (served by Config Server)

	# Keycloak Integration for OAuth2 Resource Server
	spring.security.oauth2.resourceserver.jwt.issuer-uri=http://my-keycloak-container:8080/realms/my-microservices-realm
	
    