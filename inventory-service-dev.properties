# Properties specific to inventory-service when 'dev' profile is active

# This name will be used for Eureka registration for the Inventory service.
# It can be different from the name used to fetch config (which is "inventory-service").
spring.application.name=Inventory

# Default port for inventory service
server.port=8080

#inventory.specific.setting=someValue
eureka.client.service-url.defaultZone=http://my-eureka-container:8761/eureka/
eureka.instance.prefer-ip-address=true

#Crucial for /actuator/refresh
management.endpoints.web.exposure.include=health,info,refresh

spring.datasource.url=jdbc:postgresql://host.docker.internal:5432/InventorySystem
spring.datasource.username=postgres
spring.datasource.password=admin
spring.datasource.driver-class-name=org.postgresql.Driver
#spring.datasource.driver-class-name=com.p6spy.engine.spy.P6SpyDriver

spring.datasource.jpa.hibernate.ddl-auto=update
spring.datasource.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.datasource.jpa.properties.hibernate.format_sql=true

# --- JPA / Hibernate Configuration ---
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true 
# spring.jpa.generate-ddl=true # ddl-auto usually handles this, but can be explicit
	
	
# --- Logging Configuration ---
logging.level.org.hibernate.SQL=DEBUG
# logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE # For seeing SQL parameters
logging.level.org.hibernate.tool.hbm2ddl=DEBUG
logging.level.com.example.inventory=INFO
	
	
# --- gRPC Configuration (if Inventory Service is a gRPC server) ---
# Port your gRPC server in THIS Inventory Service will listen on INSIDE its container
grpc.server.port=9091
# How to advertise the gRPC port to Eureka clients.
eureka.instance.metadata-map.grpc.port=${grpc.server.port}